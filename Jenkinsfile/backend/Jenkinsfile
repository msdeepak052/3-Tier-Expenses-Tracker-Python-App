pipeline {
    agent any
    
    environment {
        // Application Configuration
        APP_NAME = "expense-tracker-backend"
        VERSION = "1.0.${BUILD_NUMBER}"
        
        // Docker Configuration
        ECR_REPO = "expense-tracker/backend"
        AWS_REGION = "us-west-2"
        
        // Security Scanning
        TRIVY_CACHE_DIR = '.trivycache'
        
        // Testing
        PYTHON_VERSION = "3.10"
    }

    stages {
        // Stage 1: Checkout Code
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/your-repo/expense-tracker.git'
                dir('backend') {
                    sh 'pwd'
                }
            }
        }
        
        // Stage 2: Setup Python Environment
        stage('Setup Python') {
            steps {
                dir('backend') {
                    sh """
                    python -m venv venv
                    . venv/bin/activate
                    pip install --upgrade pip
                    pip install -r requirements.txt
                    """
                }
            }
        }
        
        // Stage 3: Linting and Testing
        stage('Lint & Test') {
            steps {
                dir('backend') {
                    sh """
                    . venv/bin/activate
                    flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
                    flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
                    pytest app/tests/ -v --cov=app --cov-report=xml
                    """
                }
            }
            post {
                success {
                    junit 'backend/app/tests/reports/*.xml'
                    cobertura 'backend/coverage.xml'
                }
            }
        }
        
        // Stage 4: SonarQube Analysis
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    dir('backend') {
                        sh """
                        . venv/bin/activate
                        sonar-scanner \
                            -Dsonar.projectKey=${APP_NAME} \
                            -Dsonar.projectName=${APP_NAME} \
                            -Dsonar.projectVersion=${VERSION} \
                            -Dsonar.sources=app \
                            -Dsonar.python.coverage.reportPaths=coverage.xml \
                            -Dsonar.python.version=${PYTHON_VERSION}
                        """
                    }
                }
            }
        }
        
        // Stage 5: Build Docker Image
        stage('Build Docker Image') {
            steps {
                script {
                    dir('backend') {
                        // Get ECR repository URL
                        def ecrUrl = sh(
                            script: "aws ecr describe-repositories --repository-names ${ECR_REPO} --region ${AWS_REGION} --query 'repositories[0].repositoryUri' --output text",
                            returnStdout: true
                        ).trim()

                        env.IMAGE_URI = "${ecrUrl}:${env.VERSION}"
                        docker.build("${env.IMAGE_URI}", ".")
                    }
                }
            }
        }
        
        // Stage 6: Security Scan
        stage('Trivy Scan') {
            steps {
                script {
                    sh 'mkdir -p ${TRIVY_CACHE_DIR}'
                    sh 'wget https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl -O html.tpl'
                    
                    sh """
                    trivy image --cache-dir ${TRIVY_CACHE_DIR} \
                        --severity HIGH,CRITICAL \
                        --format template \
                        --template "@html.tpl" \
                        -o trivy-report.html \
                        ${env.IMAGE_URI}
                    """
                    archiveArtifacts artifacts: 'trivy-report.html'
                }
            }
        }
        
        // Stage 7: Push to ECR
        stage('Push to ECR') {
            steps {
                script {
                    sh """
                    aws ecr get-login-password --region ${AWS_REGION} | \
                    docker login --username AWS --password-stdin ${env.IMAGE_URI.split(':')[0]}
                    """
                    def dockerImage = docker.image("${env.IMAGE_URI}")
                    dockerImage.push()
                }
            }
        }
        
        // Stage 8: Update Argo CD
        stage('Trigger Argo CD Sync') {
            steps {
                script {
                    // Update the image tag in the Kubernetes manifests
                    sh """
                    sed -i 's|image:.*|image: ${env.IMAGE_URI}|g' k8s/backend-deployment.yaml
                    git add k8s/backend-deployment.yaml
                    git commit -m "Update backend image to ${env.VERSION}"
                    git push origin main
                    """
                    
                    // Trigger Argo CD sync (assuming you have argocd CLI configured)
                    sh """
                    argocd app sync expense-tracker-backend \
                        --revision main \
                        --server argocd.your-eks-cluster.com \
                        --auth-token \$ARGOCD_AUTH_TOKEN
                    """
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo "✅ Backend CI/CD pipeline succeeded"
        }
        failure {
            echo "❌ Backend CI/CD pipeline failed"
        }
    }
}